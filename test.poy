from flask import Flask, render_template, request
import psycopg2
import plotly.graph_objs as go
import dotenv

from plotly.subplots import make_subplots

app = Flask(__name__)

# PostgreSQL database connection
conn = psycopg2.connect(
    host="your_host_name",
    database="your_database_name",
    user="your_username",
    password="your_password"
)

# Sample data
data = [
    {
        "date": "2023-02-16",
        "calories": 2000,
        "protein": 150,
        "carbs": 250,
        "fats": 110,
        "sleep": 8,
        "mood": 7,
    },
    {
        "date": "2023-02-15",
        "calories": 2100,
        "protein": 150,
        "carbs": 250,
        "fats": 80,
        "sleep": 7,
        "mood": 6,
    },
    {
        "date": "2023-02-14",
        "calories": 2300,
        "protein": 150,
        "carbs": 250,
        "fats": 90,
        "sleep": 8,
        "mood": 5,
    },
    {
        "date": "2023-02-13",
        "calories": 1800,
        "protein": 120,
        "carbs": 220,
        "fats": 100,
        "sleep": 10,
        "mood": 9,
    },
    {
        "date": "2023-02-12",
        "calories": 2100,
        "protein": 140,
        "carbs": 230,
        "fats": 120,
        "sleep": 6,
        "mood": 6,
    },
    {
        "date": "2023-02-11",
        "calories": 2000,
        "protein": 120,
        "carbs": 280,
        "fats": 70,
        "sleep": 5,
        "mood": 8,
    },
    {
        "date": "2023-02-10",
        "calories": 2200,
        "protein": 180,
        "carbs": 240,
        "fats": 150,
        "sleep": 8,
        "mood": 7,
    }
]


# Define index route
@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        # Get data from form
        date = request.form["date"]
        calories = request.form["calories"]
        protein = request.form["protein"]
        carbs = request.form["carbs"]
        fats = request.form["fats"]
        sleep = request.form["sleep"]
        sleep = request.form["mood"]

        # Check if the date already exists in the data
        for i, d in enumerate(data):
            if d["date"] == date:
                # Update existing entry
                data[i]["calories"] = calories
                data[i]["protein"] = protein
                data[i]["carbs"] = carbs
                data[i]["fats"] = fats
                data[i]["sleep"] = sleep
                data[i]["mood"] = sleep
                break
        else:
            # Add new entry to list
            data.append(
                {"date": date, "calories": calories, "protein": protein, "carbs": carbs, "fats": fats, "sleep": sleep, "mood": mood}
            )

    # Sort data by date
    data_sorted = sorted(data, key=lambda x: x["date"], reverse=True)

    # Create plotly figure
    fig = make_subplots(rows=2, cols=3, subplot_titles=("Calories", "Protein", "Carbs", "Fats", "Sleep", "Mood"))
    fig.add_trace(
        go.Scatter(
            x=[d["date"] for d in data_sorted],
            y=[d["calories"] for d in data_sorted],
            name="Calories",
        ),
        row=1,
        col=1,
    )
    fig.add_trace(
        go.Scatter(
            x=[d["date"] for d in data_sorted],
            y=[d["sleep"] for d in data_sorted],
            name="Sleep",
        ),
        row=1,
        col=2,
    )
    fig.add_trace(
        go.Scatter(
            x=[d["date"] for d in data_sorted],
            y=[d["sleep"] for d in data_sorted],
            name="Sleep",
        ),
        row=1,
        col=3,
    )
    fig.add_trace(
        go.Scatter(
            x=[d["date"] for d in data_sorted],
            y=[d["protein"] for d in data_sorted],
            name="Protein",
        ),
        row=2,
        col=1,
    )
    fig.add_trace(
        go.Scatter(
            x=[d["date"] for d in data_sorted],
            y=[d["carbs"] for d in data_sorted],
            name="Carbs",
        ),
        row=2,
        col=2,
    )
    fig.add_trace(
        go.Scatter(
            x=[d["date"] for d in data_sorted],
            y=[d["fats"] for d in data_sorted],
            name="Fats",
        ),
        row=2,
        col=3,
    )
    fig.update_layout(height=600, title_text="Nutrional Data")


    # Convert plotly figure to HTML
    graph = fig.to_html(full_html=False)

    return render_template("index.html", data=data, graph=graph)


if __name__ == "__main__":
    app.run(debug=True)
